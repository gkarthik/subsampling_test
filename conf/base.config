/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    subsampling_test Nextflow base config file
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Default config options for all compute environments
----------------------------------------------------------------------------------------
*/

// Function to ensure that resource requirements don't go beyond maximum available resources
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}

process {
    // Default process configuration
    cpus = { check_max(1, 'cpus') }
    memory = { check_max(4.GB, 'memory') }
    time = { check_max(4.h, 'time') }
    errorStrategy = { task.exitStatus in [143,137,104,134,139] ? 'retry' : 'finish' }
    maxRetries = 3
    maxErrors = '-1'
    echo = false
    container = 'subsampling-test:latest'
    
    // Resource requirements
    withLabel:process_low {
        cpus = { check_max(2, 'cpus') }
        memory = { check_max(4.GB, 'memory') }
        time = { check_max(4.h, 'time') }
    }
    withLabel:process_medium {
        cpus = { check_max(4, 'cpus') }
        memory = { check_max(8.GB, 'memory') }
        time = { check_max(8.h, 'time') }
    }
    withLabel:process_high {
        cpus = { check_max(8, 'cpus') }
        memory = { check_max(32.GB, 'memory') }
        time = { check_max(16.h, 'time') }
    }
}

// Load modules.config for DSL2 module specific options
includeConfig 'modules.config' 